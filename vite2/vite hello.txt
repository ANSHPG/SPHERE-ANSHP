<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body,
        html {
            overflow-x: hidden;
        }
    </style>
    <title>Vite App</title>
</head>

<body>
    <canvas class="webgl"></canvas>

    <script>
        // to get link of the host 
        // cd vite-project
        // npm run dev

        import * as THREE from "three";
        import "./style.css"
        import { OrbitControls } from "three/examples/jsm/controls/OrbitControls"

        // scene 
        const scene = new THREE.Scene()
        // radius segment segments , more the segments more smooth the entity will be
        const geometry = new THREE.SphereGeometry(3, 64, 64)
        const material = new THREE.MeshStandardMaterial({
            color: "#00ff83",
        })
        const mesh = new THREE.Mesh(geometry, material);
        // mesh is the combination of geometry and material
        scene.add(mesh)

        // sizes
        const sizes = {
            width: window.innerWidth,
            height: window.innerHeight,
        }
        // light
        const light = new THREE.PointLight(0xffffff, 1, 100)
        // color intensity distance
        light.position.set(0, 10, 10)
        scene.add(light)



        // camera
        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)
        // filed of view  aspect ratio  near clipping - far clipping object
        camera.position.z = 20
        // the less the number the more closee you are
        scene.add(camera)


        // render
        const canvas = document.querySelector('.webgl');
        const renderer = new THREE.WebGLRenderer({ canvas })
        renderer.setSize(sizes.width, sizes.height)
        renderer.setPixelRatio(2)
        renderer.render(scene, camera)

        //controls
        const controls = new OrbitControls(camera, canvas)
        controls.enableDamping = true
        controls.enablePan = false
        controls.enableZoom = false
        controls.autoRotate = true
        controls.autoRotateSpeed = 5

        //Resize
        window.addEventListener('resize', () => {
            // update sizes
            console.log(window.innerWidth)
            sizes.width = window.innerWidth
            sizes.height = window.innerHeight
            // update camera
            camera.aspect = sizes.width / sizes.height
            camera.updateProjectionMatrix()
            renderer.setSize(sizes.width, sizes.height)
        })

        const loop = () => {
            controls.update()
            renderer.render(scene, camera)
            window.requestAnimationFrame(loop);
        }
        loop()

    </script>
</body>

</html>